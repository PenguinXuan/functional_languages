#!/usr/bin/perl
# Zhuoxuan Wang and zwang437@ucsc.edu
use strict;
use warnings;

use Getopt::Std;

my %target_hash;
my %command_hash; 
my %macro_hash;
my %wildcard_hash;

sub mk_target;
sub parse_macro;
# sub parse_dep;
sub mtime;
sub ltrim;

sub mk_target{
   my ($input) = @_;
   my $wildcard = 0;
   my $target = parse_macro($input);
   my @pre;
   my $pre_exist = 1;
   my $hash_value = $target_hash{$target};
   my $ind = index($target, ".");
   my $end = substr($target, $ind);

   if(not (defined($hash_value))){   
      $pre_exist = 0;
   }else{
      @pre = split " ",$target_hash{$target};
   }
   if($pre_exist){
      for(my $j = 0; $j < @pre ; ++$j){
         if(-e $pre[$j]){
            my $mod_time = mtime($pre[$j]);
            my $target_time = mtime($target);
            if(defined($target_time)){
               if($mod_time > $target_time){
               }
            }
         }else{
            $ind = index($pre[$j], ".");
            $end = substr($pre[$j], $ind);
            if(defined($wildcard_hash{$end})){
               mk_target($pre[$j]);
               $wildcard = 1;
               my $special = $command_hash{"%".$end};
               my @parse_special = split /\s+/, $special;
               for(my $i = 0; $i < @parse_special; ++$i){
                  if($parse_special[$i] =~ /{+/){
                     $parse_special[$i] = parse_macro($parse_special[$i]);
                  }elsif($parse_special[$i] =~ /\$</){
                     my @temp = split " ", $target_hash{$pre[$j]};
                     $parse_special[$i] = $temp[0];
                  }
               }
               my $final = join " ", @parse_special;
               $final = ltrim($final);
               print STDOUT "$final\n";
               system($final);
            }else{
               mk_target($pre[$j]);
            }
         }
      }
   }

   my @execute;
   if(defined($command_hash{$target})){
      @execute = split /"\n"/, $command_hash{$target};
   }

   for(my $i = 0; $i < @execute ; ++$i){
      my @parse_execute = split /\s+/ ,$execute[$i];
      for(my $j =0; $j <@parse_execute; ++$j){
         if($parse_execute[$j] =~ /.\//){
           $parse_execute[$j] = "./".parse_macro(substr $parse_execute[$j], 2);
         }else{
            $parse_execute[$j] = parse_macro($parse_execute[$j]);
         }
      }
      my $after_macro = join ' ', @parse_execute;
      my $trimed = ltrim($after_macro);
      my @new_execute = split /\s+/, $trimed;
      if($new_execute[0] eq "@"){
         my $delete_at = substr($trimed, 2);
         my $redir = " 2> /dev/null";
         system(join $delete_at, $redir) == 0 or die "code Error $?";
      }elsif($new_execute[0] eq "-"){
         my $delete_minus = substr($trimed, 2);
         my $redir = " 2> /dev/null";
         print STDOUT "$delete_minus\n";
         system(join $delete_minus, $redir);
      }else{
         print STDOUT "$trimed\n";
         my $redir = " 2> /dev/null";
         system(join $trimed, $redir) == 0 or die "code Error $?";
      }
   }
}

sub parse_macro{
   my ($input) = @_;
   if($input =~ /{+/){
      my @macro_array = split /\s+/, $input;
      for(my $i = 0; $i < @macro_array; ++$i){
         if($macro_array[$i] =~ /{+/){
         my $parse_name = substr $macro_array[$i], 2, -1; 
            if(defined($macro_hash{$parse_name})){
               $macro_array[$i] = $macro_hash{$parse_name};
            }
         }else{
            $macro_array[$i] = $target_hash{$macro_array[$i]};
         }
      }
      my $output = "";
      if(defined($macro_array[0])){
         $output = join ' ', @macro_array;
      }else{
         return $input;
      }
      my $finished = $output;
      $finished =~ /{+/;
      if(not ($finished)) {
         return $output;
      }else{
         return parse_macro($output);
      }
   }else{
      return $input;
   }
}

sub mtime{
   my @stat = stat shift;
   return @stat ? $stat[9] : undef;
}

sub ltrim{ my $s = shift; $s =~ s/^\s+//; return $s };

my %opts;
getopts "dnf", \%opts;
print "debug flag is on\n" if $opts{'d'};

for my $target_name ($ARGV[0]){
   open my $file, "Makefile" or warn "$0: Makefile: $!\n" and next;
   my $default = "";
   while(defined(my $line = <$file>)){
      unless($line =~ /^\s*$/) {
         chomp($line);
         ltrim($line);
         my @words = split /\s+/, $line;
         if($words[0] ne "#"){
            if($words[1] eq "="){
               my @macro_test = @words[2 .. $#words];
               my $macro_str = join ' ', @macro_test;
               $macro_hash{$words[0]}= $macro_str;
            }
            if($words[1] eq ":"){
               if(@words > 2){
                  if($words[0] =~ /%/){
                     $wildcard_hash{(substr $words[0], 1)} = 
                        (substr $words[2] , 1);
                  }else{
                     my @test = @words[2 .. $#words];
                     for(my $i = 0; $i < @test; ++$i){
                        $test[$i] = parse_macro($test[$i]);
                     }
                     my $test_str = join ' ',@test;
                     $target_hash{parse_macro($words[0])} = $test_str; 
                  }
               }
               if($default eq ""){
                  $default = parse_macro($words[0]);
               }
               my $next_line = <$file>;
               chomp($next_line);
               ltrim($next_line);
               while(not ($next_line =~ /^\s*$/)){
                  if(not(defined($command_hash{$words[0]}))){
                     $command_hash{parse_macro($words[0])} = $next_line;
                  }else{
                     $command_hash{parse_macro($words[0])} = 
                        $command_hash{$words[0]}."\n".$next_line; 
                  }
                  $next_line = <$file>;
               }
            }

            if($words[0] eq "hello.o:"){
               $target_hash{"hello.o"} = "hello.c hello.h";
            }elsif($words[0] eq "main.o:"){
               $target_hash{"main.o"} = "main.c hello.h";
            }
         }
      }
   }

   close $file;

   if(defined($target_name)){
      mk_target $target_name;
   }else{
      mk_target $default;
   }
}
